{"version":3,"sources":["OnLoad.js","StyledButton.js","FlagChoices.js","InfoData.js","WrongData.js","FlagAnswer.js","Header.js","FlagQuestion.js","CountryGame.js","App.js","serviceWorker.js","index.js"],"names":["OnLoad","_ref","flags","react_default","a","createElement","className","style","backgroundImage","concat","StyledButton","text","onClick","type","FlagChoices","props","options","handleChange","handleSubmit","inputs","map","opt","index","key","id","value","checked","onChange","name","console","log","onSubmit","src_StyledButton_0","InfoData","capital","region","subregion","population","answer","flag","nativeName","undefined","WrongData","FlagAnswer","correct","onNext","bck","src_InfoData_0","src_WrongData","Header","styles","display","show","QuestionStates","Nav","for","FlagQuestion","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userChoice","bind","assertThisInitialized","e","setState","Number","target","preventDefault","onGuess","_this$props","lang","questionState","answerText","correctOption","opts","objectSpread","output","src_FlagChoices_0","src_FlagAnswer_0","flagPic","src","alt","FlagQuestion_Nav","src_Header_0","Component","defaultProps","CountryGame","countries","animation","nextQuestion","endAnimation","_getFlags","_this2","setTimeout","_this3","fetch","then","resp","json","Math","floor","random","length","_getOptions","catch","warn","apiCall","c","shuffle","slice","tries","option","indexOf","push","_this$state","class","_countries$correctOpt","languages","src_OnLoad_0","src_FlagQuestion_0","dist","App","src_CountryGame_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uaA2DeA,SAvDA,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MAGb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,sBAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,GAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,GAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,GAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,GAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,GAAf,SAIlDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAafH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,IAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,IAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,IAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,IAAf,QAE9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEC,gBAAe,OAAAC,OAASP,EAAM,IAAf,oBCpC/CQ,SATM,SAAAT,GAAA,IAAEU,EAAFV,EAAEU,KAAMC,EAARX,EAAQW,QAASC,EAAjBZ,EAAiBY,KAAjB,OACnBV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAChBO,KAAMA,GAAQ,SACdD,QAASA,GAERD,KCqBUG,SAzBM,SAAAC,GACnB,IAAIC,EAAUD,EAAMC,SAAW,GACxBC,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,aACjBC,EAASH,EAAQI,IAAI,SAACC,EAAKC,GAAN,OAEvBnB,EAAAC,EAAAC,cAAA,SAAOkB,IAAKF,EAAIG,GAAIlB,UAAS,QAAAG,OAAUa,IACrCnB,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,QACLY,MAAOJ,EAAIG,GACXE,QAASL,EAAIK,QACbC,SAAUV,EACVW,KAAK,cACLtB,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBACfe,EAAIO,QAIT,OADFC,QAAQC,IAAIf,EAAMC,SAEdb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYyB,SAAUb,GACnCC,EACDhB,EAAAC,EAAAC,cAAC2B,EAAD,CAAcrB,KAAK,aAAaE,KAAK,cC2B5BoB,cAhDE,SAAAlB,GAAS,IACnBmB,EAAoEnB,EAApEmB,QAASC,EAA2DpB,EAA3DoB,OAAQC,EAAmDrB,EAAnDqB,UAAWC,EAAwCtB,EAAxCsB,WAAkBC,GAAsBvB,EAA5BwB,KAA4BxB,EAAtBuB,QAAQE,EAAczB,EAAdyB,WAIzD7B,EAAQR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACvBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,YAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,GAAAG,OAEO6B,EAFP,MAAA7B,OAEkB+B,EAFlB,qBAAA/B,OAEgD0B,EAFhD,sBAAA1B,OAE2E2B,EAF3E,2BAAA3B,OAE8G4B,EAF9G,6BAAA5B,OAEoJyB,EAFpJ,OAgCJ,OAxBGI,IAAWE,IACZ7B,EAAQR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACrBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,YAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,GAAAG,OAEK6B,EAFL,oBAAA7B,OAE8B0B,EAF9B,sBAAA1B,OAEyD2B,EAFzD,2BAAA3B,OAE4F4B,EAF5F,6BAAA5B,OAEkIyB,EAFlI,aAOYO,IAAZP,IACAvB,EAAQR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACzBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,YAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,GAAAG,OAEO6B,EAFP,oBAAA7B,OAEgC0B,EAFhC,sBAAA1B,OAE2D2B,EAF3D,2BAAA3B,OAE8F4B,EAF9F,QAQElC,EAAAC,EAAAC,cAAA,WACKM,KC5BM+B,EAfG,SAAAzC,GAAc,IAAZqC,EAAYrC,EAAZqC,OAChB,OACAnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,cAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,mBAAAG,OAEqB6B,MC2BVK,EA/BI,SAAC5B,GAAU,IAElB6B,EAAsF7B,EAAtF6B,QAASN,EAA6EvB,EAA7EuB,OAAQO,EAAqE9B,EAArE8B,OAAQX,EAA6DnB,EAA7DmB,QAASC,EAAoDpB,EAApDoB,OAAQC,EAA4CrB,EAA5CqB,UAAWC,EAAiCtB,EAAjCsB,WAAYE,EAAqBxB,EAArBwB,KAAOC,EAAczB,EAAdyB,WAC5EM,EAAM,CAAEtC,gBAAe,IAK3B,OAJGoC,IACCE,EAAM,CAAEtC,gBAAe,oEAAAC,OAAsE8B,EAAtE,OAI3BpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,MAAOuC,GACnCF,EAEGzC,EAAAC,EAAAC,cAAC0C,EAAD,CAAUT,OAAQA,EACRJ,QAASA,EACTC,OAAQA,EACRC,UAAWA,EACXC,WAAYA,EACZE,KAAMA,EACNC,WAAYA,IAItBrC,EAAAC,EAAAC,cAAC2C,EAAD,CAAWV,OAAQA,IAGnBnC,EAAAC,EAAAC,cAAC2B,EAAD,CAAcrB,KAAK,OAAOC,QAASiC,MCV5BI,SAnBA,SAAAhD,GAAY,IAGnBiD,EAAS,CACTC,QAAS,QAQb,OAZuBlD,EAAVmD,OAOTF,EAAS,CACLC,QAAS,UAKbhD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,MAAO2C,GAC9B/C,EAAAC,EAAAC,cAAA,kCCONgD,SACM,GADNA,EAEU,EAFVA,EAGY,EAGZC,EAAM,WACV,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,WAAWP,UAAU,uBAAuBkB,GAAG,gBAE3DrB,EAAAC,EAAAC,cAAA,SAAOkD,IAAI,cAAcjD,UAAU,sBAC/BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,SAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,QAEEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,uFACoFH,EAAAC,EAAAC,cAAA,WADpF,uDASFmD,cAKJ,SAAAA,EAAYzC,GAAO,IAAA0C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM7C,KACDiD,MAAQ,CACXC,gBAAYxB,GAGdgB,EAAKxC,aAAewC,EAAKxC,aAAaiD,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACpBA,EAAKvC,aAAeuC,EAAKvC,aAAagD,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPHA,4EAUNW,GACXR,KAAKS,SAAS,CAACJ,WAAYK,OAAOF,EAAEG,OAAO9C,8CAGhC2C,GACXA,EAAEI,iBACFZ,KAAK7C,MAAM0D,QAAQb,KAAKI,MAAMC,6CAGvB,IAAAS,EAcHd,KAAK7C,MAZPmB,EAFKwC,EAELxC,QAEAC,GAJKuC,EAGLC,KAHKD,EAILvC,QACAC,EALKsC,EAKLtC,UACAC,EANKqC,EAMLrC,WACAE,EAPKmC,EAOLnC,KACAqC,EARKF,EAQLE,cACA5D,EATK0D,EASL1D,QACA6D,EAVKH,EAULG,WACAhC,EAXK6B,EAWL7B,OACAiC,EAZKJ,EAYLI,cACAtC,EAbKkC,EAaLlC,WAGE7B,EAAI,GAAAF,OAAMoE,EAAN,QAAApE,OAAuB0B,EAAvB,SAAA1B,OAAqC2B,EAArC,UAAA3B,OAAuD+B,EAAvD,SAAA/B,OAAyE4B,EAAzE,SAAA5B,OAA2FyB,GAChG2C,IAAerC,IAChB7B,EAAI,GAAAF,OAAMoE,EAAN,QAAApE,OAAuB0B,EAAvB,SAAA1B,OAAqC2B,EAArC,6BAAA3B,OAA0E4B,EAA1E,SAAA5B,OAA4FyB,IAElGL,QAAQC,IAAInB,GACZ,IAAIyC,EAAOwB,IAAkBvB,EACtBY,EAAcL,KAAKI,MAAnBC,WACHc,EAAO/D,EAAQI,IAAI,SAAAC,GAAG,OAAAqC,OAAAsB,EAAA,EAAAtB,CAAA,GACrBrC,EADqB,CAExBK,QAASuC,IAAe5C,EAAIG,OAE1ByD,EAASL,IAAkBvB,EAC5BlD,EAAAC,EAAAC,cAAC6E,EAAD,CAAajE,aAAc2C,KAAK3C,aACpBC,aAAc0C,KAAK1C,aACnBF,QAAS+D,IACrB5E,EAAAC,EAAAC,cAAC8E,EAAD,CACCL,cAAeA,EACf9D,QAASA,EACT4D,cAAeA,EACfhC,QAASgC,IAAkBvB,EAC3BR,OAAQA,EACRP,OAAQuC,EACR3C,QAASA,EACTC,OAAQA,EACRC,UAAWA,EACXC,WAAYA,EACZE,KAAMA,EACNC,WAAYA,IAGZ4C,EAAWjF,EAAAC,EAAAC,cAAA,YAcf,OAbGuE,IAAkBvB,IACnB+B,EACEjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OACAC,UAAU,WACV+E,IAAK9C,EACL+C,IAAI,qBAQRnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACkF,EAAD,MACApF,EAAAC,EAAAC,cAACmF,EAAD,CAAQpC,KAAMA,IACb6B,EACAG,UAzFkBK,aAArBjC,EACGkC,aAAe,CACpB1E,QAAS,IA6FEwC,wCCuBAmC,cAjKX,SAAAA,EAAY5E,GAAO,IAAA0C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACflC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAM7C,KAEDiD,MAAQ,CACT4B,UAAW,GACX5E,QAAS,GACT6E,WAAW,EACX3F,MAAO,GACP4E,mBAAerC,EACfmC,mBAAenC,GAGnBgB,EAAKgB,QAAUhB,EAAKgB,QAAQP,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACfA,EAAKqC,aAAerC,EAAKqC,aAAa5B,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACpBA,EAAKsC,aAAetC,EAAKsC,aAAa7B,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACpBA,EAAKuC,UAAYvC,EAAKuC,UAAU9B,KAAfR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAfFA,8EAmBJ,IAAAwC,EAAArC,KACXsC,WAAW,WACPD,EAAK5B,SAAS,CACVwB,WAAW,KAEhB,uCAGG,IAAAM,EAAAvC,KACNwC,MAAM,wCACLC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAT,GACF,IAAMd,EAAgB0B,KAAKC,MAAMD,KAAKE,SAAWd,EAAUe,QACrD3F,EAAUmF,EAAKS,YAAY9B,EAAec,GAChDO,EAAKH,UAAUJ,GACfO,EAAK9B,SAAS,CACVuB,YACAd,gBACA9D,UACA4D,cAAevB,MAGtBwD,MAAMhF,QAAQiF,kDAIflD,KAAKmC,eACLnC,KAAKmD,0CAGDzE,GAAQ,IAERsC,EAAgBtC,IADIsB,KAAKI,MAAtBc,cAEazB,EACAA,EACpBO,KAAKS,SAAS,CAACO,yDAKf,IAAME,EAAgB0B,KAAKC,MAAMD,KAAKE,SAAW9C,KAAKI,MAAM4B,UAAUe,QAChE3F,EAAU4C,KAAKgD,YAAY9B,EAAelB,KAAKI,MAAM4B,WAC3DhC,KAAKS,SAAS,CACVS,gBACA9D,UACA4D,cAAevB,sCAIbuC,GACN,IAAI1F,EAAQ0F,EAAUxE,IAAI,SAAA4F,GAAC,OAAIA,EAAEzE,OACjC0E,IAAQ/G,GACRA,EAAQA,EAAMgH,MAAM,EAAE,IACtBtD,KAAKS,SAAS,CACVnE,8CAII4E,EAAec,GAGvB,IAFA,IAAI5E,EAAU,CAAC8D,GACXqC,EAAQ,EACLnG,EAAQ2F,OAAS,GAAKQ,EAAQ,IAAI,CACrC,IAAIC,EAASZ,KAAKC,MAAMD,KAAKE,SAAWd,EAAUe,SACjB,IAA7B3F,EAAQqG,QAAQD,GAChBpG,EAAQsG,KAAKF,GAEbD,IAGR,OAAOF,IAAQjG,oCAKfa,QAAQC,IAAI8B,KAAKI,MAAM9D,OADlB,IAAAqH,EAOD3D,KAAKI,MAJR4B,EAHI2B,EAGJ3B,UACAd,EAJIyC,EAIJzC,cACA9D,EALIuG,EAKJvG,QACA4D,EANI2C,EAMJ3C,cAGGK,EAAS9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACxBH,EAAAC,EAAAC,cAAA,OAAKmH,MAAM,eAAcrH,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,cAItJ,QAAsBoC,IAAlBqC,EAA6B,KAAA2C,EAE6C7B,EAAUd,GAA7EvC,EAFsBkF,EAEtBlF,KAAMX,EAFgB6F,EAEhB7F,KAAMM,EAFUuF,EAEVvF,QAASC,EAFCsF,EAEDtF,OAAQC,EAFPqF,EAEOrF,UAAWC,EAFlBoF,EAEkBpF,WAAYG,EAF9BiF,EAE8BjF,WACrDmC,EAAOiB,EAAUd,GAAe4C,UAAU,GAAG9F,KACnDC,QAAQC,IAAIS,GACZV,QAAQC,IAAIF,GACZC,QAAQC,IAAII,GAEZ,IAAI6C,EAAO/D,EAAQI,IAAI,SAAAC,GACnB,MAAO,CACHG,GAAIH,EACJO,KAAMgE,EAAUvE,GAAKO,KACrBM,QAAS0D,EAAUvE,GAAKa,QACxByC,KAAMiB,EAAUvE,GAAKqG,UAAU,GAAG9F,QAwBtCqD,EApBArB,KAAKI,MAAM6B,UAoBF1F,EAAAC,EAAAC,cAACsH,EAAD,CAAQzH,MAAO0D,KAAKI,MAAM9D,QAlBnCC,EAAAC,EAAAC,cAACuH,EAAD,CACA9C,cAAeA,EACfD,WAAcjD,EACd6C,QAAWb,KAAKa,QAChB5B,OAAUe,KAAKkC,aACf9E,QAAW+D,EACXH,cAAiBA,EACjBrC,KAAQA,EACRL,QAAWA,EACXyC,KAAQA,EACRxC,OAAQA,EACRC,UAAWA,EACXC,WAAYA,EACZG,WAAYA,IASpB,OACIrC,EAAAC,EAAAC,cAAA,WACC4E,EACD9E,EAAAC,EAAAC,cAACwH,EAAA,QAAD,KACI1H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,yEAzJMoF,aCaXqC,0LAbX,OACE3H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAMbH,EAAAC,EAAAC,cAAC0H,EAAD,cATUtC,cCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnI,EAAAC,EAAAC,cAACkI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.dde0f73a.chunk.js","sourcesContent":["import React from 'react';\nimport './OnLoad.css';\n\n\nconst OnLoad = ({flags}) => {\n\n\n    return(\n        <div className=\"wrapper\">\n            <div className=\"textContainer\">\n            Flags of the World\n            </div>\n\n            <div className=\"line1\">\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[0]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[1]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[2]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[3]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[4]})` }}>\n                </div>\n            </div>\n\n            <div className=\"line2\">\n                {/* <div className=\"flag\" style={{ backgroundImage: `url(${flags[5]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[6]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[7]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[8]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[9]})` }}>\n                </div> */}\n            </div>\n\n            <div className=\"line3\">\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[10]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[11]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[12]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[13]})` }}>\n                </div>\n                <div className=\"flag\" style={{ backgroundImage: `url(${flags[14]})` }}>\n                </div>    \n            </div>\n\n        </div>\n    )\n}\n   \n    \n\n\nexport default OnLoad;\n","import React from 'react';\nimport './StyledButton.css';\n\nconst StyledButton = ({text, onClick, type}) => (\n  <button className=\"btn-flag\"\n    type={type || 'button'}\n    onClick={onClick}\n  >\n    {text}\n  </button>\n);\n\nexport default StyledButton;","import React from 'react';\nimport StyledButton from './StyledButton';\nimport './FlagChoices.css';\n\nconst FlagChoices =  props => {\n  let options = props.options || []\n  const {handleChange, handleSubmit} = props;\n  let inputs = options.map((opt, index) => (\n\n    <label key={opt.id} className={`label${index}`}>\n      <input type=\"radio\"\n             value={opt.id}\n             checked={opt.checked}\n             onChange={handleChange}\n             name=\"flag-choice\"\n             className=\"radio-input\" />\n      <span className=\"radio-button\"></span>\n      {opt.name}\n    </label>\n  ));\nconsole.log(props.options);\n  return (\n    <form className=\"flag-form\" onSubmit={handleSubmit}>\n      {inputs}\n      <StyledButton text=\"GUESS FLAG\" type=\"submit\"/>\n    </form>\n  );\n}\n\nexport default FlagChoices;","import React from \"react\";\nimport \"./InfoData.css\";\n\nconst InfoData = props => {\nconst {capital, region, subregion, population, flag, answer, nativeName} = props;\n\n\n\nlet text = (<div className=\"textWrapper\">\n    <div className=\"openingText\">\n        Correct!\n    </div>\n    <div className=\"infoText\">\n        {\n        `${answer} (${nativeName}) is situated in ${region} and is a part of ${subregion}. It has population of ${population} and the capital city is ${capital}.`\n        }\n    </div>\n</div>);\n\n\nif(answer === nativeName) {\n  text = (<div className=\"textWrapper\">\n    <div className=\"openingText\">\n      Correct!\n    </div>\n    <div className=\"infoText\">\n      {\n      `${answer} is situated in ${region} and is a part of ${subregion}. It has population of ${population} and the capital city is ${capital}.`\n      }\n    </div>\n</div>);}\n\nif (capital === undefined) {\n    text = (<div className=\"textWrapper\">\n  <div className=\"openingText\">\n      Correct!\n  </div>\n  <div className=\"infoText\">\n      {\n      `${answer} is situated in ${region} and is a part of ${subregion}. It has population of ${population}.`\n      }\n  </div>\n</div>);}\n\nreturn(\n    <div>\n        {text}\n    </div>\n)\n}\n\nexport default InfoData;\n\n","import React from 'react';\nimport './InfoData.css'\n\nconst WrongData = ({answer}) => {\n    return(\n    <div className=\"textWrapper\">\n    <div className=\"openingText\">\n      Incorrect!\n    </div>\n    <div className=\"infoText\">\n      {\n      `Correct answer: ${answer}`\n      }\n    </div>\n    </div>\n    )\n}\n\nexport default WrongData;\n\n\n","import React from 'react';\nimport StyledButton from './StyledButton';\nimport './FlagAnswer.css';\nimport InfoData from './InfoData';\nimport WrongData from './WrongData';\n\n\nconst FlagAnswer = (props) => {\n\n    const { correct, answer, onNext, capital, region, subregion, population, flag , nativeName} = props;\n    let bck = { backgroundImage: `` };\n    if(correct) {\n        bck = { backgroundImage: `radial-gradient( rgba(30,145,214,.88),rgba(88,173,221,.95)), url(${flag})` }\n    }\n\n    return (\n    <div className='flag-answer' style={bck} >\n    {correct ? \n\n        <InfoData answer={answer}\n                  capital={capital}\n                  region={region} \n                  subregion={subregion}\n                  population={population}\n                  flag={flag}\n                  nativeName={nativeName}/>\n    \n    : \n      ( \n        <WrongData answer={answer} />)}\n       \n       \n        <StyledButton text=\"NEXT\" onClick={onNext}/>\n        \n    </div>\n        )\n    }\n\nexport default FlagAnswer;\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = ({show}) => {\n   \n\n    let styles = {\n        display: 'none'\n    };\n    if(show) {\n        styles = {\n            display: 'block'\n        };\n    }\n\n    return(\n        <header className=\"header\" style={styles}>\n            <p>Flags of the World</p>\n        </header>\n    )\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport FlagChoices from './FlagChoices';\nimport FlagAnswer from './FlagAnswer';\nimport Header from './Header';\nimport './FlagQuestion.css';\nimport {\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  WhatsappIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  PinterestIcon,\n  VKIcon,\n  OKIcon,\n  RedditIcon,\n  TumblrIcon,\n  LivejournalIcon,\n  MailruIcon,\n  ViberIcon,\n  WorkplaceIcon,\n  LineIcon,\n  EmailIcon,\n} from 'react-share';\nconst QuestionStates = {\n  QUESTION: 1,\n  ANSWER_WRONG: 2,\n  ANSWER_CORRECT: 3\n};\n\nconst Nav = () => {\n  return(\n    <div className=\"navigation\">\n    <input type=\"checkbox\" className=\"navigation__checkbox\" id=\"navi-toggle\" />\n\n    <label for=\"navi-toggle\" className=\"navigation__button\">\n        <span className=\"navigation__icon\">&nbsp;</span>\n    </label>\n\n    <div className=\"navigation__background\">&nbsp;</div>\n\n      <nav className=\"navigation__nav\">\n        <ul className=\"navigation__list\">\n        Rules are simple, try to guess the flag and you'll get to know more about the state.<br></br>If you like the game, feel free to share. \nEnjoy!\n        </ul>\n    </nav>\n    </div>\n  )\n}\n\nclass FlagQuestion extends Component {\n  static defaultProps = {\n    options: []\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userChoice: undefined,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({userChoice: Number(e.target.value)});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onGuess(this.state.userChoice);\n  }\n\n  render() {\n    const {\n      capital, \n      lang,\n      region, \n      subregion, \n      population,\n      flag,\n      questionState,\n      options,\n      answerText,\n      onNext, \n      correctOption,\n      nativeName\n    } = this.props;\n\n    let text = `${answerText} is ${region} and ${subregion} that ${nativeName} and ${population} and ${capital}`\n    if(answerText === nativeName) {\n      text = `${answerText} is ${region} and ${subregion} that no native name and ${population} and ${capital}`\n    }\n    console.log(text)\n    let show = questionState === QuestionStates.QUESTION;\n    const {userChoice} = this.state;\n    let opts = options.map(opt => ({\n      ...opt,\n      checked: userChoice === opt.id\n    }));\n    let output = questionState === QuestionStates.QUESTION ?\n      (<FlagChoices handleChange={this.handleChange}\n                   handleSubmit={this.handleSubmit}\n                   options={opts} />) :\n      (<FlagAnswer\n        correctOption={correctOption}\n        options={options}\n        questionState={questionState}\n        correct={questionState === QuestionStates.ANSWER_CORRECT}\n        onNext={onNext}\n        answer={answerText}\n        capital={capital}\n        region={region}\n        subregion={subregion}\n        population={population}\n        flag={flag}\n        nativeName={nativeName}  \n        />);\n    \n    let flagPic = (<div></div>);\n    if(questionState === QuestionStates.QUESTION ) {\n      flagPic = (\n        <div className=\"flag-div\">\n          <img\n          className=\"flag-img\"\n          src={flag}\n          alt=\"Guess the flag\"\n        />\n        </div>\n        \n       )\n    }\n  \n    return (\n      <div className=\"questionWrapper\">\n        <Nav />\n        <Header show={show}/>\n        {output}\n        {flagPic}\n       </div>\n    );\n  }\n}\n\nexport default FlagQuestion;\nexport { QuestionStates };","import React, {Component} from 'react';\nimport OnLoad from './OnLoad';\nimport FlagQuestion, {QuestionStates} from './FlagQuestion.js';\nimport shuffle from 'shuffle-array';\nimport './CountryGame.css';\nimport { Offline, Online } from \"react-detect-offline\";\n\nclass CountryGame extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            countries: [], \n            options: [],\n            animation: true,\n            flags: [],\n            correctOption: undefined, \n            questionState: undefined\n        }\n        \n        this.onGuess = this.onGuess.bind(this);\n        this.nextQuestion = this.nextQuestion.bind(this);\n        this.endAnimation = this.endAnimation.bind(this)\n        this._getFlags = this._getFlags.bind(this)\n        \n    }\n\n    endAnimation() {\n        setTimeout(() => {\n            this.setState({\n                animation: false\n            })\n        }, 5000);\n    }\n    \n    apiCall() {\n        fetch(\"https://restcountries.eu/rest/v2/all\")\n        .then(resp => resp.json())\n        .then(countries => {\n            const correctOption = Math.floor(Math.random() * countries.length);\n            const options = this._getOptions(correctOption, countries);\n            this._getFlags(countries);\n            this.setState({\n                countries, \n                correctOption, \n                options, \n                questionState: QuestionStates.QUESTION\n            });\n        })\n        .catch(console.warn)\n    }\n\n    componentDidMount() {\n        this.endAnimation();\n        this.apiCall();\n    }\n\n    onGuess(answer) {\n        const {correctOption} = this.state;\n        let questionState = answer === correctOption ?\n                            QuestionStates.ANSWER_CORRECT :\n                            QuestionStates.ANSWER_WRONG;\n        this.setState({questionState});\n        \n    }\n\n    nextQuestion() {\n        const correctOption = Math.floor(Math.random() * this.state.countries.length);\n        const options = this._getOptions(correctOption, this.state.countries);\n        this.setState({\n            correctOption, \n            options,\n            questionState: QuestionStates.QUESTION\n        })\n    }\n\n    _getFlags(countries) {\n        let flags = countries.map(c => c.flag)\n        shuffle(flags)\n        flags = flags.slice(0,15)\n        this.setState({\n            flags\n        })\n    }\n\n    _getOptions(correctOption, countries) {\n        let options = [correctOption];\n        let tries = 0;\n        while (options.length < 4 && tries < 15) {\n            let option = Math.floor(Math.random() * countries.length);\n            if (options.indexOf(option) === -1) {\n                options.push(option);\n            } else {\n                tries++;\n            }\n        }\n        return shuffle(options);\n    }\n\n\n    render() { \n        console.log(this.state.flags)\n        let {\n         countries, \n         correctOption, \n         options, \n         questionState\n        } = this.state;\n        \n        let output = <div className=\"spinnerWrap\">\n            <div class=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n        </div>\n        ;\n\n        if (correctOption !== undefined) {\n            \n            const {flag, name, capital, region, subregion, population, nativeName } = countries[correctOption];\n            const lang = countries[correctOption].languages[0].name;\n            console.log(flag)\n            console.log(name)\n            console.log(capital)\n            \n            let opts = options.map(opt => {\n                return {\n                    id: opt, \n                    name: countries[opt].name, \n                    capital: countries[opt].capital,\n                    lang: countries[opt].languages[0].name\n                };\n            });\n\n            if(!this.state.animation){\n                output = (\n                <FlagQuestion\n                correctOption={correctOption}\n                answerText = {name}\n                onGuess = {this.onGuess}\n                onNext = {this.nextQuestion}\n                options = {opts}\n                questionState = {questionState}\n                flag = {flag} \n                capital = {capital}\n                lang = {lang}\n                region={region}\n                subregion={subregion}\n                population={population}\n                nativeName={nativeName}\n                />\n                )\n            }\n            else {\n                output = <OnLoad flags={this.state.flags}/>\n            }\n            \n        }\n        return (\n            <div>\n            {output}\n            <Offline>\n                <div className=\"showConn\">\n                    <h2>There is a problem with your internet connection!</h2>\n                </div>\n            </Offline>\n            </div>\n        );\n    }\n}\n\n\nexport default CountryGame;\n","import React, { Component } from 'react';\nimport CountryGame from './CountryGame';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"flag-app\">\n        {/* <header\n          className=\"title-header\" \n          >\n          <h1 className=\"title-text\">Guess The Flag</h1>\n        </header> */}\n        <CountryGame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}